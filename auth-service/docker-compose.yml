services:
  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./docker/fastapi/dockerfile
    restart: always
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@db:${DATABASE_PORT}/${DATABASE_NAME}"
    depends_on:
      auth-db:
        condition: service_healthy
    ports:
      - "${API_PORT}:8000"
    expose:
      - "${API_PORT}"
    volumes:
      - .:/workdir
      # ボリュームマウントの権限を設定
      - /workdir/.pytest_cache
    networks:
        - auth-networks
    # リソース制限を追加
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
  auth-db:
    image: postgres:17.4-alpine
    container_name: auth-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      TZ: ${TIMEZONE}
      PGTZ: ${TIMEZONE}
    # DB起動完了まで待機するための設定
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # 既存プロジェクトとのポート競合を避けるための設定
    ports:
      - "${DATABASE_PORT}:5432"
    # DB削除を容易にするためにプロジェクト内のディレクトリにマウント
    volumes:
      - ./docker/postgresql/data:/var/lib/postgresql/data
    networks:
      - auth-networks

networks:
  auth-networks:
    driver: bridge


